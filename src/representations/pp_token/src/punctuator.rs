use std::fmt::Display;

// We don't support the use of digraphs. e.g. '<:', ':>', '<%', '%>', '%:', '%:%:'
// (nor trigraphs, as they were removed in C23)
#[derive(Clone, Debug, Hash, PartialEq)]
pub enum Punctuator {
    OpenBracket,
    CloseBracket,
    OpenParen { preceeded_by_whitespace: bool },
    CloseParen,
    OpenCurly,
    CloseCurly,
    Comma,
    Colon,
    Semicolon,
    Multiply,
    Assign,
    Ellipses,
    Hash,
    Dot,
    Arrow,
    Increment,
    Decrement,
    HashConcat,
    Ampersand,
    Add,
    Subtract,
    BitComplement,
    Not,
    Divide,
    Modulus,
    LeftShift,
    RightShift,
    NotEquals,
    LessThan,
    GreaterThan,
    LessThanEq,
    GreaterThanEq,
    DoubleEquals,
    BitXor,
    BitOr,
    LogicalAnd,
    LogicalOr,
    Ternary,
    AddAssign,
    SubtractAssign,
    MultiplyAssign,
    DivideAssign,
    ModulusAssign,
    LeftShiftAssign,
    RightShiftAssign,
    BitAndAssign,
    BitXorAssign,
    BitOrAssign,
}

impl Display for Punctuator {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            Self::OpenBracket => "[",
            Self::CloseBracket => "]",
            Self::OpenParen { .. } => "(",
            Self::CloseParen => ")",
            Self::OpenCurly => "{",
            Self::CloseCurly => "}",
            Self::Comma => ",",
            Self::Colon => ":",
            Self::Semicolon => ";",
            Self::Multiply => "*",
            Self::Assign => "=",
            Self::Ellipses => "...",
            Self::Hash => "#",
            Self::Dot => ".",
            Self::Arrow => "=>",
            Self::Increment => "++",
            Self::Decrement => "--",
            Self::HashConcat => "##",
            Self::Ampersand => "&",
            Self::Add => "+",
            Self::Subtract => "-",
            Self::BitComplement => "~",
            Self::Not => "!",
            Self::Divide => "/",
            Self::Modulus => "%",
            Self::LeftShift => "<<",
            Self::RightShift => ">>",
            Self::NotEquals => "!=",
            Self::LessThan => "<",
            Self::GreaterThan => ">",
            Self::LessThanEq => "<=",
            Self::GreaterThanEq => ">=",
            Self::DoubleEquals => "==",
            Self::BitXor => "^",
            Self::BitOr => "|",
            Self::LogicalAnd => "&&",
            Self::LogicalOr => "||",
            Self::Ternary => "?",
            Self::AddAssign => "+=",
            Self::SubtractAssign => "-=",
            Self::MultiplyAssign => "*=",
            Self::DivideAssign => "/=",
            Self::ModulusAssign => "%=",
            Self::LeftShiftAssign => "<<=",
            Self::RightShiftAssign => ">>=",
            Self::BitAndAssign => "&=",
            Self::BitXorAssign => "^=",
            Self::BitOrAssign => "|=",
        })
    }
}
